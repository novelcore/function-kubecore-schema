apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: simple-transitive-test
  labels:
    provider: kubecore
    service: transitive-discovery-test
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  
  compositeTypeRef:
    apiVersion: test.kubecore.io/v1alpha1
    kind: XTransitiveDiscoveryTest
  
  mode: Pipeline
  pipeline:
  - step: kubecore-context-resolution
    functionRef:
      name: function-kubecore-schema
    input:
      apiVersion: context.fn.kubecore.io/v1beta1
      kind: ContextInput
      spec:
        query:
          resourceType: XGitHubProject
          requestedSchemas:
          - kubeCluster
          - kubEnv
          - app
        context:
          requestorName: demo-project
          requestorNamespace: test
          # Try without transitive first to see if basic discovery works
          enableTransitiveDiscovery: false
          references:
            githubProjectRefs:
            - name: demo-project
              namespace: test
              apiVersion: github.platform.kubecore.io/v1alpha1
              kind: XGitHubProject
  
  - step: debug-output
    functionRef:
      name: function-auto-ready
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      resources:
      - name: debug-configmap
        base:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: transitive-discovery-results
            namespace: default
          data:
            status: "transitive discovery test completed"
            resourceType: "XGitHubProject"
            requestedSchemas: "kubeCluster,kubEnv,app"
            transitiveDiscoveryEnabled: "false"
        patches:
        # Extract the discovered schemas from the platform context
        - type: FromEnvironmentFieldPath
          fromFieldPath: context["context.fn.kubecore.io/platform-context"].availableSchemas
          toFieldPath: data.discoveredSchemas
          policy:
            fromFieldPath: Optional
        # Extract requestor information
        - type: FromEnvironmentFieldPath  
          fromFieldPath: context["context.fn.kubecore.io/platform-context"].requestor.name
          toFieldPath: data.requestorName
          policy:
            fromFieldPath: Optional
        # Extract relationship information
        - type: FromEnvironmentFieldPath
          fromFieldPath: context["context.fn.kubecore.io/platform-context"].relationships
          toFieldPath: data.relationships
          policy:
            fromFieldPath: Optional
        # Add timestamp
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.creationTimestamp
          toFieldPath: data.testTimestamp